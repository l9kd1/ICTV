#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
#    This file belongs to the ICTV project, written by Nicolas Detienne,
#    Francois Michel, Maxime Piraux, Pierre Reinbold and Ludovic Taffin
#    at Université catholique de Louvain.
#
#    Copyright (C) 2016-2018  Université catholique de Louvain (UCL, Belgium)
#
#    ICTV is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published
#    by the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    ICTV is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with ICTV.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import os

from ictv import database
from ictv.app import main, get_config
from ictv.database import update_database

""" Starts the webapp. """


class RawUsageHelpFormatter(argparse.HelpFormatter):
    """ Keeps the compatibility with web.py app.run way of setting ip address and port from command line. """
    def _format_usage(self, usage, actions, groups, prefix):
        if prefix is None:
            prefix = 'usage: '
        if usage is not None:
            usage = usage % dict(prog=self._prog)
        elif usage is None and not actions:
            usage = '%(prog)s' % dict(prog=self._prog)
        elif usage is None:
            prog = '%(prog)s' % dict(prog=self._prog)
            format = self._format_actions_usage
            action_usage = format(actions, groups)
            usage = ' '.join([s for s in [prog, action_usage] if s])
        return '%s%s\n\n' % (prefix, usage)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(formatter_class=RawUsageHelpFormatter)
    parser.add_argument('address_port', default='0.0.0.0:8080',
                        help='Address and port to bind the webapp to. Defaults to: 0.0.0.0:8080')
    parser.add_argument('--config', help='Path to configuration file. Defaults to: configuration.yaml')
    args = parser.parse_args()

    config_file = args.config
    if not config_file:
        config_file = os.path.join(os.path.dirname(__file__), 'configuration.yaml')
    if not os.path.isfile(config_file):
        raise Exception('File %s could not be found', config_file)
    config = get_config(config_file)
    if database.database_path is None:
        database.database_path = config['database_uri']

    config['address_port'] = args.address_port
    update_database()
    main(config)
